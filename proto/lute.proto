syntax = "proto3";

import "google/protobuf/empty.proto";

package lute;

service Lute {
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckReply) {}
}

message HealthCheckReply { bool ok = 1; }

message PutFileRequest {
  string name = 1;
  string content = 2;
}

message PutFileReply { FileMetadata metadata = 1; }

message FileMetadata {
  string id = 1;
  string name = 2;
  string first_saved_at = 3;
  string last_saved_at = 4;
}

message IsFileStaleRequest { string name = 1; }

message IsFileStaleReply { bool stale = 1; }

message DeleteFileRequest { string name = 1; }

message GetFilePageTypeRequest { string name = 1; }

message GetFilePageTypeReply { PageType page_type = 1; }

message GetFileContentRequest { string name = 1; }

message GetFileContentReply { string content = 1; }

service FileService {
  rpc GetFilePageType(GetFilePageTypeRequest) returns (GetFilePageTypeReply) {}
  rpc IsFileStale(IsFileStaleRequest) returns (IsFileStaleReply) {}
  rpc PutFile(PutFileRequest) returns (PutFileReply) {}
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}
  rpc GetFileContent(GetFileContentRequest) returns (GetFileContentReply) {}
}

message GetCrawlerMonitorReply { CrawlerMonitor monitor = 1; }

enum CrawlerStatus {
  CrawlerPaused = 0;
  CrawlerRunning = 1;
  CrawlerThrottled = 2;
}

enum Priority {
  Express = 0;
  High = 1;
  Standard = 2;
  Low = 3;
}

message CrawlerQueueItem {
  string item_key = 1;
  string enqueue_time = 2;
  string deduplication_key = 3;
  string file_name = 4;
  Priority priority = 5;
  optional string correlation_id = 6;
}

message ClaimedCrawlerQueueItem {
  CrawlerQueueItem item = 1;
  uint32 claim_ttl_seconds = 2;
}

message CrawlerMonitor {
  CrawlerStatus status = 1;
  uint32 size = 2;
  uint32 claimed_item_count = 3;
  repeated ClaimedCrawlerQueueItem claimed_items = 4;
  uint32 remaining_window_requests = 5;
  uint32 window_request_count = 6;
}

message SetStatusRequest { CrawlerStatus status = 1; }

message SetCrawlerStatusReply { CrawlerStatus status = 1; }

message EnqueueRequest {
  string file_name = 1;
  Priority priority = 2;
  string deduplication_key = 3;
  optional string correlation_id = 4;
  map<string, string> metadata = 5;
}

service CrawlerService {
  rpc GetMonitor(google.protobuf.Empty) returns (GetCrawlerMonitorReply) {}
  rpc SetStatus(SetStatusRequest) returns (SetCrawlerStatusReply) {}
  rpc Enqueue(EnqueueRequest) returns (google.protobuf.Empty) {}
  rpc Empty(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ResetLimiter(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc RemoveThrottle(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message GetAlbumRequest { string file_name = 1; }

message AlbumArtist {
  string name = 1;
  string file_name = 2;
}

message Track {
  string name = 1;
  optional uint32 duration_seconds = 2;
  optional float rating = 3;
  optional string position = 4;
}

message Album {
  string name = 1;
  string file_name = 2;
  float rating = 3;
  uint32 rating_count = 4;
  repeated AlbumArtist artists = 5;
  repeated string primary_genres = 6;
  repeated string secondary_genres = 7;
  repeated string descriptors = 8;
  repeated Track tracks = 9;
  optional string release_date = 10;
  repeated string languages = 11;
  optional string cover_image_url = 12;
  optional string duplicate_of = 13;
  repeated string duplicates = 14;
  optional string spotify_id = 15;
}

message GetAlbumReply { Album album = 1; }

message GenreAggregate {
  string name = 1;
  uint32 primary_genre_count = 2;
  uint32 secondary_genre_count = 3;
}

message GetAggregatedGenresReply { repeated GenreAggregate genres = 1; }

message ItemAndCount {
  string name = 1;
  uint32 count = 2;
}

message GetAggregatedDescriptorsReply { repeated ItemAndCount descriptors = 1; }

message GetAggregatedLanguagesReply { repeated ItemAndCount languages = 1; }

message GetEmbeddingKeysReply { repeated string keys = 1; }
message AlbumSearchQuery {
  optional string exact_name = 1;
  repeated string include_file_names = 2;
  repeated string exclude_file_names = 3;
  repeated string include_artists = 4;
  repeated string exclude_artists = 5;
  repeated string include_primary_genres = 6;
  repeated string exclude_primary_genres = 7;
  repeated string include_secondary_genres = 8;
  repeated string exclude_secondary_genres = 9;
  repeated string include_languages = 10;
  repeated string exclude_languages = 11;
  repeated string include_descriptors = 12;
  optional uint32 min_primary_genre_count = 13;
  optional uint32 min_secondary_genre_count = 14;
  optional uint32 min_descriptor_count = 15;
  optional uint32 min_release_year = 16;
  optional uint32 max_release_year = 17;
  optional bool include_duplicates = 18;
  optional string text = 19;
}

message SearchPagination {
  optional uint32 offset = 1;
  optional uint32 limit = 2;
}

message SearchAlbumsRequest {
  AlbumSearchQuery query = 1;
  SearchPagination pagination = 2;
}

message SearchAlbumsReply {
  repeated Album albums = 1;
  uint32 total = 2;
}

message GetManyAlbumsRequest { repeated string file_names = 1; }

message GetManyAlbumsReply { repeated Album albums = 1; }

message AlbumMonitor {
  uint32 album_count = 1;
  uint32 artist_count = 2;
  uint32 genre_count = 3;
  uint32 descriptor_count = 4;
  uint32 language_count = 5;
  uint32 duplicate_count = 6;
  repeated GenreAggregate aggregated_genres = 7;
  repeated ItemAndCount aggregated_descriptors = 8;
  repeated ItemAndCount aggregated_languages = 9;
  repeated ItemAndCount aggregated_years = 10;
  uint32 spotify_id_count = 11;
}

message GetAlbumMonitorReply { AlbumMonitor monitor = 1; }

message FindSimilarAlbumsRequest {
  string file_name = 1;
  string embedding_key = 2;
  optional uint32 limit = 3;
  optional AlbumSearchQuery filters = 4;
}

message FindSimilarAlbumsReply { repeated Album albums = 1; }

message FindSpotifyAlbumRequest { string file_name = 1; }

message FindSpotifyAlbumReply { optional SpotifyAlbum album = 1; }

service AlbumService {
  rpc GetMonitor(google.protobuf.Empty) returns (GetAlbumMonitorReply) {}
  rpc GetAlbum(GetAlbumRequest) returns (GetAlbumReply) {}
  rpc GetManyAlbums(GetManyAlbumsRequest) returns (GetManyAlbumsReply) {}
  rpc SearchAlbums(SearchAlbumsRequest) returns (SearchAlbumsReply) {}
  rpc GetEmbeddingKeys(google.protobuf.Empty) returns (GetEmbeddingKeysReply) {}
  rpc FindSimilarAlbums(FindSimilarAlbumsRequest)
      returns (FindSimilarAlbumsReply) {}
  rpc FindSpotifyAlbum(FindSpotifyAlbumRequest)
      returns (FindSpotifyAlbumReply) {}
}

message IsAuthorizedReply { bool authorized = 1; }

message GetAuthorizationUrlReply { string url = 1; }

message HandleAuthorizationCodeRequest { string code = 1; }

message SpotifyArtistReference {
  string spotify_id = 1;
  string name = 2;
}

enum SpotifyAlbumType {
  ALBUM = 0;
  SINGLE = 1;
  COMPILATION = 2;
  APPREARS_ON = 3;
}

message SpotifyAlbumReference {
  string spotify_id = 1;
  string name = 2;
  SpotifyAlbumType album_type = 3;
}

message SpotifyTrack {
  string spotify_id = 1;
  string name = 2;
  repeated SpotifyArtistReference artists = 3;
  SpotifyAlbumReference album = 4;
  optional uint32 duration_ms = 5;
}

message SpotifyTrackReference {
  string spotify_id = 1;
  string name = 2;
  repeated SpotifyArtistReference artists = 3;
  optional uint32 duration_ms = 4;
}

message SpotifyAlbum {
  string spotify_id = 1;
  string name = 2;
  SpotifyAlbumType album_type = 3;
  repeated SpotifyArtistReference artists = 4;
  repeated SpotifyTrackReference tracks = 5;
}

message GetSavedTracksReply { repeated SpotifyTrack tracks = 1; }

message GetPlaylistTracksRequest { string playlist_id = 1; }

message GetPlaylistTracksReply { repeated SpotifyTrack tracks = 1; }

service SpotifyService {
  rpc IsAuthorized(google.protobuf.Empty) returns (IsAuthorizedReply) {}
  rpc GetAuthorizationUrl(google.protobuf.Empty)
      returns (GetAuthorizationUrlReply) {}
  rpc HandleAuthorizationCode(HandleAuthorizationCodeRequest)
      returns (google.protobuf.Empty) {}
  rpc GetSavedTracks(google.protobuf.Empty) returns (GetSavedTracksReply) {}
  rpc GetPlaylistTracks(GetPlaylistTracksRequest)
      returns (GetPlaylistTracksReply) {}
}

message ParseFileContentStoreReply { uint32 count = 1; }

message MigrateSqliteRequest { uint32 version = 1; }

message CrawlParseFailedFilesRequest { optional string error = 1; }

message CrawlParseFailedFilesReply { uint32 count = 1; }

message KeyCountReply { uint32 count = 1; }

message KeysMatchingRequest { string pattern = 1; }

message GetEventKeyMigrationMonitorReply {
  uint32 event_count = 1;
  uint32 event_without_key_count = 2;
  map<string, uint32> key_counts_by_topic = 3;
}

service OperationsService {
  rpc FlushRedis(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ParseFileContentStore(google.protobuf.Empty)
      returns (ParseFileContentStoreReply) {}
  rpc CrawlParseFailedFiles(CrawlParseFailedFilesRequest)
      returns (CrawlParseFailedFilesReply) {}
  rpc MigrateSqliteToLatest(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  rpc MigrateSqlite(MigrateSqliteRequest) returns (google.protobuf.Empty) {}
  rpc GetKeyValueStoreSize(google.protobuf.Empty) returns (KeyCountReply) {}
  rpc ClearKeyValueStore(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  rpc DeleteKeysMatching(KeysMatchingRequest) returns (google.protobuf.Empty) {}
  rpc CountKeysMatching(KeysMatchingRequest) returns (KeyCountReply) {}
  rpc GetEventKeyMigrationMonitor(google.protobuf.Empty)
      returns (GetEventKeyMigrationMonitorReply) {}
}

message AggregatedFailureError {
  string error = 1;
  uint32 count = 2;
}

enum PageType {
  AlbumPage = 0;
  ArtistPage = 1;
  ChartPage = 2;
  AlbumSearchResultPage = 3;
}

message GetAggregatedFailureErrorsRequest { optional PageType page_type = 1; }

message GetAggregatedFailureErrorsReply {
  repeated AggregatedFailureError errors = 1;
}

message ParsedArtistReference {
  string name = 1;
  string file_name = 2;
}

message ParsedChartAlbum {
  string file_name = 1;
  string name = 2;
  float rating = 3;
  uint32 rating_count = 4;
  repeated ParsedArtistReference artists = 5;
  repeated string primary_genres = 6;
  repeated string secondary_genres = 7;
  repeated string descriptors = 8;
  optional string release_date = 9;
}

message ParsedTrack {
  string name = 1;
  optional uint32 duration_seconds = 2;
  optional float rating = 3;
  optional string position = 4;
}

message ParsedCredit {
  ParsedArtistReference artist = 1;
  repeated string roles = 2;
}

message ParsedAlbum {
  string name = 1;
  float rating = 2;
  uint32 rating_count = 3;
  repeated ParsedArtistReference artists = 4;
  repeated string primary_genres = 5;
  repeated string secondary_genres = 6;
  repeated string descriptors = 7;
  repeated ParsedTrack tracks = 8;
  optional string release_date = 9;
  repeated string languages = 10;
  repeated ParsedCredit credits = 11;
  optional string cover_image_url = 12;
  optional string spotify_id = 13;
}

message ParsedArtistAlbum {
  string name = 1;
  string file_name = 2;
}

message ParsedArtist {
  string name = 1;
  repeated ParsedArtistAlbum albums = 2;
}

message ParsedAlbumSearchResult {
  string name = 1;
  string file_name = 2;
  repeated ParsedArtistReference artists = 3;
}

message ParsedChart { repeated ParsedChartAlbum albums = 1; }

message ParsedFileData {
  oneof data {
    ParsedChart chart = 1;
    ParsedAlbum album = 2;
    ParsedArtist artist = 3;
    ParsedAlbumSearchResult album_search_result = 4;
  }
}

message ParseFileOnContentStoreRequest { string file_name = 1; }

message ParseFileOnContentStoreReply { ParsedFileData data = 1; }

message EnqueueRetriesRequest { string error = 1; }

service ParserService {
  rpc ParseFileOnContentStore(ParseFileOnContentStoreRequest)
      returns (ParseFileOnContentStoreReply) {}
  rpc GetAggregatedFailureErrors(GetAggregatedFailureErrorsRequest)
      returns (GetAggregatedFailureErrorsReply) {}
  rpc EnqueueRetries(EnqueueRetriesRequest) returns (google.protobuf.Empty) {}
}

message AlbumSearchLookupQuery {
  string artist_name = 1;
  string album_name = 2;
}

message LookupAlbumRequest { AlbumSearchLookupQuery query = 1; }

message AlbumSearchResult {
  string album_name = 1;
  string file_name = 2;
  repeated AlbumArtist artists = 3;
}

message AlbumSearchLookup {
  AlbumSearchLookupQuery query = 1;
  optional string last_updated_at = 2;
  optional string album_search_file_name = 3;
  optional string file_processing_correlation_id = 4;
  optional string album_search_file_parse_error = 5;
  optional AlbumSearchResult album_search_result = 6;
  optional string album_file_parse_error = 7;
  optional Album album = 8;
  string status = 9;
}

message LookupAlbumReply { AlbumSearchLookup lookup = 1; }

message AggregatedStatus {
  string status = 1;
  uint32 count = 2;
}

message GetAggregatedAlbumSearchStatusesReply {
  repeated AggregatedStatus statuses = 1;
}

service LookupService {
  rpc LookupAlbum(LookupAlbumRequest) returns (LookupAlbumReply) {}
  rpc GetAggregatedAlbumSearchStatuses(google.protobuf.Empty)
      returns (GetAggregatedAlbumSearchStatusesReply) {}
}

message Profile {
  string id = 1;
  string name = 2;
  string last_updated_at = 3;
  map<string, uint32> albums = 4;
}

message ItemWithFactor {
  string item = 1;
  uint32 factor = 2;
}

message ProfileSummary {
  string id = 1;
  string name = 2;
  uint32 album_count = 3;
  uint32 indexed_album_count = 4;
  float average_rating = 5;
  uint32 median_year = 6;
  repeated ItemWithFactor artists = 7;
  repeated ItemWithFactor primary_genres = 8;
  repeated ItemWithFactor secondary_genres = 9;
  repeated ItemWithFactor descriptors = 10;
  repeated ItemWithFactor years = 11;
  repeated ItemWithFactor decades = 12;
  repeated ItemWithFactor credit_tags = 13;
}

message CreateProfileRequest {
  string id = 1;
  string name = 2;
}

message CreateProfileReply { Profile profile = 1; }

message GetProfileRequest { string id = 1; }

message GetProfileReply { Profile profile = 1; }

message GetProfileSummaryRequest { string id = 1; }

message GetProfileSummaryReply { ProfileSummary summary = 1; }

message FileNameWithFactor {
  string file_name = 1;
  uint32 factor = 2;
}

message PutManyAlbumsOnProfileRequest {
  string profile_id = 1;
  repeated FileNameWithFactor albums = 2;
}

message PutManyAlbumsOnProfileReply { Profile profile = 1; }

message PutAlbumOnProfileRequest {
  string profile_id = 1;
  string file_name = 2;
  uint32 factor = 3;
}

message PutAlbumOnProfileReply { Profile profile = 1; }

message ImportSavedSpotifyTracksRequest { string profile_id = 1; }

message ImportSpotifyPlaylistTracksRequest {
  string profile_id = 1;
  string playlist_id = 2;
}

message PendingSpotifyImport {
  string profile_id = 1;
  AlbumSearchLookup album_search_lookup = 2;
  uint32 factor = 3;
}

message GetPendingSpotifyImportsRequest { string profile_id = 1; }

message GetPendingSpotifyImportsReply {
  uint32 count = 1;
  repeated AggregatedStatus statuses = 2;
  repeated PendingSpotifyImport pending_imports = 3;
}

message GetAllProfilesReply { repeated Profile profiles = 1; }

message DeleteProfileRequest { string id = 1; }

message RemoveAlbumFromProfileRequest {
  string profile_id = 1;
  string file_name = 2;
}

message ClearPendingSpotifyImportsRequest { string profile_id = 1; }

service ProfileService {
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileReply) {}
  rpc DeleteProfile(DeleteProfileRequest) returns (google.protobuf.Empty) {}
  rpc GetProfile(GetProfileRequest) returns (GetProfileReply) {}
  rpc GetAllProfiles(google.protobuf.Empty) returns (GetAllProfilesReply) {}
  rpc GetProfileSummary(GetProfileSummaryRequest)
      returns (GetProfileSummaryReply) {}
  rpc PutAlbumOnProfile(PutAlbumOnProfileRequest)
      returns (PutAlbumOnProfileReply) {}
  rpc PutManyAlbumsOnProfile(PutManyAlbumsOnProfileRequest)
      returns (PutManyAlbumsOnProfileReply) {}
  rpc RemoveAlbumFromProfile(RemoveAlbumFromProfileRequest)
      returns (google.protobuf.Empty) {}
  rpc ImportSavedSpotifyTracks(ImportSavedSpotifyTracksRequest)
      returns (google.protobuf.Empty) {}
  rpc ImportSpotifyPlaylistTracks(ImportSpotifyPlaylistTracksRequest)
      returns (google.protobuf.Empty) {}
  rpc GetPendingSpotifyImports(GetPendingSpotifyImportsRequest)
      returns (GetPendingSpotifyImportsReply) {}
  rpc ClearPendingSpotifyImports(ClearPendingSpotifyImportsRequest)
      returns (google.protobuf.Empty) {}
}

message QuantileRankAlbumAssessmentSettings {
  optional uint32 primary_genre_weight = 1;
  optional uint32 secondary_genre_weight = 2;
  optional uint32 descriptor_weight = 3;
  optional uint32 rating_weight = 4;
  optional uint32 rating_count_weight = 5;
  optional uint32 descriptor_count_weight = 6;
  optional uint32 credit_tag_weight = 7;
  optional float novelty_score = 8;
}

message EmbeddingSimilarityAlbumAssessmentSettings { string embedding_key = 1; }

message AlbumAssessment {
  float score = 1;
  map<string, string> metadata = 2;
}

message AssessAlbumReply { AlbumAssessment assessment = 1; }

message AlbumAssessmentSettings {
  oneof settings {
    QuantileRankAlbumAssessmentSettings quantile_rank_settings = 1;
    EmbeddingSimilarityAlbumAssessmentSettings embedding_similarity_settings =
        2;
  }
}

message AssessAlbumRequest {
  string file_name = 1;
  string profile_id = 2;
  optional AlbumAssessmentSettings settings = 3;
}

message AlbumRecommendationSettings {
  optional uint32 count = 1;
  repeated string include_primary_genres = 2;
  repeated string include_secondary_genres = 3;
  repeated string include_languages = 4;
  repeated string exclude_primary_genres = 5;
  repeated string exclude_secondary_genres = 6;
  repeated string exclude_languages = 7;
  optional uint32 min_release_year = 8;
  optional uint32 max_release_year = 9;
  optional bool exclude_known_artists = 10;
}

message RecommendAlbumsRequest {
  string profile_id = 1;
  optional AlbumRecommendationSettings recommendation_settings = 2;
  optional AlbumAssessmentSettings assessment_settings = 3;
}

message AlbumRecommendation {
  Album album = 1;
  AlbumAssessment assessment = 2;
}

message RecommendAlbumsReply {
  repeated AlbumRecommendation recommendations = 1;
}

message DefaultQuantileRankAlbumAssessmentSettingsReply {
  QuantileRankAlbumAssessmentSettings settings = 1;
}

message DraftSpotifyPlaylistRequest {
  string profile_id = 1;
  optional AlbumRecommendationSettings recommendation_settings = 2;
  optional AlbumAssessmentSettings assessment_settings = 3;
}

message DraftSpotifyPlaylistReply { repeated SpotifyTrackReference tracks = 1; }

message CreateSpotifyPlaylistRequest {
  string profile_id = 1;
  optional AlbumRecommendationSettings recommendation_settings = 2;
  optional AlbumAssessmentSettings assessment_settings = 3;
  string name = 4;
  optional string description = 5;
}

message CreateSpotifyPlaylistReply {
  string playlist_id = 1;
  repeated SpotifyTrackReference tracks = 2;
}

// message SearchSpotifyTrackIndexRequest { string query = 1; }

service RecommendationService {
  rpc AssessAlbum(AssessAlbumRequest) returns (AssessAlbumReply) {}
  rpc RecommendAlbums(RecommendAlbumsRequest) returns (RecommendAlbumsReply) {}
  rpc DefaultQuantileRankAlbumAssessmentSettings(google.protobuf.Empty)
      returns (DefaultQuantileRankAlbumAssessmentSettingsReply) {}
  rpc DraftSpotifyPlaylist(DraftSpotifyPlaylistRequest)
      returns (DraftSpotifyPlaylistReply) {}
  rpc CreateSpotifyPlaylist(CreateSpotifyPlaylistRequest)
      returns (CreateSpotifyPlaylistReply) {}
  // rpc SearchSpotifyTrackIndex(SearchSpotifyTrackIndexRequest)
  //     returns (SearchSpotifyTrackIndexReply) {}
}

message FileSavedEvent {
  string file_id = 1;
  string file_name = 2;
}

message FileDeletedEvent {
  string file_id = 1;
  string file_name = 2;
}

message FileParsedEvent {
  string file_id = 1;
  string file_name = 2;
  ParsedFileData data = 3;
}

message FileParseFailedEvent {
  string file_id = 1;
  string file_name = 2;
  string error = 3;
}

message ProfileAlbumAddedEvent {
  string profile_id = 1;
  string file_name = 2;
  uint32 factor = 3;
}

message LookupAlbumSearchUpdatedEvent { AlbumSearchLookup lookup = 1; }

message Event {
  oneof event {
    FileSavedEvent file_saved = 1;
    FileParsedEvent file_parsed = 2;
    FileParseFailedEvent file_parse_failed = 3;
    ProfileAlbumAddedEvent profile_album_added = 4;
    LookupAlbumSearchUpdatedEvent lookup_album_search_updated = 5;
    FileDeletedEvent file_deleted = 6;
  }
}

message EventPayload {
  Event event = 1;
  map<string, string> metadata = 2;
  optional string correlation_id = 3;
}

message EventStreamItem {
  string entry_id = 1;
  EventPayload payload = 2;
  string stream_id = 3;
  uint64 timestamp = 4;
}

message EventStreamReply {
  repeated EventStreamItem items = 1;
  string cursor = 2;
}

message EventStreamRequest {
  string stream_id = 1;
  string subscriber_id = 2;
  optional uint32 max_batch_size = 3;
  optional string cursor = 4;
}

message EventStreamSnapshot {
  string id = 1;
  string tail = 2;
}

enum EventSubscriberStatus {
  SubscriberPaused = 0;
  SubscriberRunning = 1;
}

message EventSubscriberSnapshot {
  string id = 1;
  EventSubscriberStatus status = 2;
  string cursor = 3;
}

message EventsMonitor {
  uint32 event_count = 1;
  repeated EventSubscriberSnapshot subscribers = 2;
  repeated EventStreamSnapshot streams = 3;
}

message GetEventsMonitorReply { EventsMonitor monitor = 1; }

message SetEventCursorRequest {
  string subscriber_id = 1;
  string cursor = 2;
}

message DeleteEventCursorRequest { string subscriber_id = 1; }

message SetEventSubscriberStatusRequest {
  string subscriber_id = 1;
  EventSubscriberStatus status = 2;
}

service EventService {
  rpc Stream(stream EventStreamRequest) returns (stream EventStreamReply) {}
  rpc GetMonitor(google.protobuf.Empty) returns (GetEventsMonitorReply) {}
  rpc SetCursor(SetEventCursorRequest) returns (google.protobuf.Empty) {}
  rpc DeleteCursor(DeleteEventCursorRequest) returns (google.protobuf.Empty) {}
  rpc SetSubscriberStatus(SetEventSubscriberStatusRequest)
      returns (google.protobuf.Empty) {}
}

enum JobProcessorStatus {
  ProcessorPaused = 0;
  ProcessorRunning = 1;
}

message JobProcessor {
  string job_name = 1;
  JobProcessorStatus status = 2;
  uint32 concurrency = 3;
  uint64 cooldown_seconds = 4;
  uint64 claim_duration_seconds = 5;
  uint32 job_count = 6;
  uint32 claimed_job_count = 7;
  uint32 batch_size = 8;
}

message Job {
  string id = 1;
  string name = 2;
  string next_execution = 3;
  optional string last_execution = 4;
  optional uint32 interval_seconds = 5;
  optional bytes payload = 6;
  optional string claimed_at = 7;
  Priority priority = 8;
}

message GetJobsReply { repeated Job jobs = 1; }

message DeleteJobRequest { string id = 1; }

message PutJobRequest {
  optional string id = 1;
  string name = 2;
  optional string next_execution = 3;
  optional uint32 interval_seconds = 4;
  optional bytes payload = 5;
  optional bool overwrite_existing = 6;
}

message SetProcessorStatusRequest {
  string name = 1;
  JobProcessorStatus status = 2;
}

message GetSchedulerMonitorReply {
  repeated JobProcessor registered_processors = 1;
  uint32 job_count = 2;
  uint32 claimed_job_count = 7;
}

service SchedulerService {
  rpc GetSchedulerMonitor(google.protobuf.Empty)
      returns (GetSchedulerMonitorReply) {}
  rpc GetJobs(google.protobuf.Empty) returns (GetJobsReply) {}
  rpc PutJob(PutJobRequest) returns (google.protobuf.Empty) {}
  rpc DeleteJob(DeleteJobRequest) returns (google.protobuf.Empty) {}
  rpc DeleteAllJobs(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc SetJobProcessorStatus(SetProcessorStatusRequest)
      returns (google.protobuf.Empty) {}
}