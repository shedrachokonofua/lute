version: "3"

tasks:
  "protoc:gen:web":
    internal: true
    cmds:
      - docker run --rm -v {{.TASKFILE_DIR}}/proto:/proto -v {{.OUTPUT_DIR}}:/out namely/protoc-all -d /proto -o /out -l web

  "core:build":
    dir: core
    env:
      RUST_LOG: warn,lute=debug,lute-postgres-connector=debug
    cmds:
      - cargo build

  "core:run":
    dir: core
    env:
      RUST_LOG: warn,lute=info,lute-postgres-connector=debug
    cmds:
      - cargo run --release

  "core:test":
    dir: core
    cmds:
      - cargo test

  "core:lint":
    dir: core
    cmds:
      - cargo clippy

  "core:lint:fix":
    dir: core
    env:
      RUST_LOG: warn,lute=debug,lute-postgres-connector=debug
    cmds:
      - cargo clippy --fix --allow-dirty

  "core:fmt":
    dir: core
    cmds:
      - cargo fmt

  "core:release":
    dir: core
    env:
      RUST_LOG: warn,lute=info
    cmds:
      - cargo build --release

  "web:proto":
    cmds:
      - task: "protoc:gen:web"
        vars:
          OUTPUT_DIR: "{{.TASKFILE_DIR}}/web/src/proto"

  "web:run":
    deps: ["web:proto"]
    dir: web
    cmds:
      - npm start

  "web:build":
    deps: ["web:proto"]
    dir: web
    cmds:
      - rm -rf ./dist
      - npm i
      - npm run build

  "web:fmt":
    dir: web
    cmds:
      - npm run fmt

  "extension:proto":
    cmds:
      - task: "protoc:gen:web"
        vars:
          OUTPUT_DIR: "{{.TASKFILE_DIR}}/extension/src/proto"

  "extension:build":
    deps: ["extension:proto"]
    dir: extension
    cmds:
      - rm -rf ./dist
      - npm i
      - npm run build

  "proto":
    cmds:
      - task: "web:proto"
      - task: "extension:proto"

  "build":
    cmds:
      - task: "core:build"
      - task: "web:build"
      - task: "extension:build"

  "fmt":
    cmds:
      - task: "core:fmt"
      - task: "web:fmt"

  "test":
    cmds:
      - task: "core:test"

  "redis:up":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up redis -d

  "core:up":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up core -d

  "core:up:build":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up core -d --build

  "core:run-with-redis":
    cmds:
      - task: "redis:up"
      - task: "core:run"

  "core:test:clean_html_resources":
    cmds:
      - node scripts/clean_html_resources.js core/resources/test

  "postgres:up":
    cmds:
      - docker-compose -f ./infra/dev/postgres.docker-compose.yml up -d

  "pg-connector:run":
    dir: connector/postgres
    cmds:
      - cargo run -- --postgres-url postgres://lute:password@localhost:25432/lute --subscriber-id dev-pg-connector --stream-id all

  "pg-connector:up":
    cmds:
      - task: "postgres:up"
      - task: "pg-connector:run"

  "memgraph:up":
    cmds:
      - docker-compose -f ./infra/dev/memgraph.docker-compose.yml up -d

  "bolt-connector:run":
    dir: connector/bolt
    cmds:
      - cargo run -- --subscriber-id dev-mg-connector --stream-id parser --db-name memgraph

  "bolt-connector:up":
    cmds:
      - task: "memgraph:up"
      - task: "bolt-connector:run"

  "discord-connector:run":
    dir: connector/discord
    cmds:
      - npm run dev

  "discord-connector:proto":
    dir: connector/discord
    cmds:
      - protoc -I=../../proto --ts_out=./src/proto --ts_opt=unary_rpc_promise=true --ts_opt=target=node --ts_opt=json_names lute.proto

  "discord-connector:up":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up discord-bot -d

  "discord-connector:up:build":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up discord-bot -d --build --force-recreate

  "discord-connector:down":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml down discord-bot -v

  "elasticsearch:up":
    cmds:
      - docker-compose -f ./infra/dev/docker-compose.yml up kibana -d

  "mandolin:run":
    dir: connector/mandolin
    cmds:
      - mix phx.server

  "mandolin:fmt":
    dir: connector/mandolin
    cmds:
      - mix format "lib/**/*.{ex,exs}"

  "mandolin:proto":
    dir: connector/mandolin
    cmds:
      - protoc -I=../../proto --elixir_out=plugins=grpc:./lib/ lute.proto
